{
  "stats": {
    "suites": 5,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-30T05:48:16.426Z",
    "end": "2025-05-30T05:48:16.526Z",
    "duration": 100,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8cbd3759-8ef8-48a6-ba4a-f171c4070768",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "185e9923-4386-4709-b512-e29f845d870e",
          "title": "validateExportRequest Middleware",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\middleware\\validateExportData.test.mjs",
          "file": "\\test\\middleware\\validateExportData.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should call next() for valid input",
              "fullTitle": "validateExportRequest Middleware should call next() for valid input",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [{ desc: \"Lunch\", amount: 10, category: \"Needs\", date: \"2023-01-01\" }],\n    summary: {\n      salary: 5000,\n      needs: 2000,\n      wants: 1000,\n      savings: 2000,\n      total: 5000,\n      remaining: 1000,\n    },\n  },\n  query: { type: \"pdf\" },\n};\nconst res = {\n  status: () => res,\n  json: () => { },\n  setHeader: () => { },\n};\nconst next = () => done();\nvalidateExportRequest(req, res, next);",
              "err": {},
              "uuid": "d3813db8-09d0-4ec9-8fe2-2c0e8b92e425",
              "parentUUID": "185e9923-4386-4709-b512-e29f845d870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid body (missing expenses)",
              "fullTitle": "validateExportRequest Middleware should return 400 for invalid body (missing expenses)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: { summary: {} }, // Missing expenses\n  query: { type: \"pdf\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "c807bca1-79ce-4c29-b80c-a9fe924f884b",
              "parentUUID": "185e9923-4386-4709-b512-e29f845d870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid query (unsupported type)",
              "fullTitle": "validateExportRequest Middleware should return 400 for invalid query (unsupported type)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [{ desc: \"Lunch\", amount: 10, category: \"Needs\", date: \"2023-01-01\" }],\n    summary: {\n      salary: 5000,\n      needs: 2000,\n      wants: 1000,\n      savings: 2000,\n      total: 5000,\n      remaining: 1000,\n    },\n  },\n  query: { type: \"csv\" }, // Invalid type\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "3ef80c49-b6a9-43be-a4b4-9fab7f71734f",
              "parentUUID": "185e9923-4386-4709-b512-e29f845d870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for missing summary",
              "fullTitle": "validateExportRequest Middleware should return 400 for missing summary",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [{ desc: \"Lunch\", amount: 10, category: \"Needs\", date: \"2023-01-01\" }],\n  },\n  query: { type: \"pdf\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "36095779-58ab-4148-936b-b7630d1d292a",
              "parentUUID": "185e9923-4386-4709-b512-e29f845d870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for empty expenses array",
              "fullTitle": "validateExportRequest Middleware should return 400 for empty expenses array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [], // Invalid: empty array\n    summary: {\n      salary: 5000,\n      needs: 2000,\n      wants: 1000,\n      savings: 2000,\n      total: 5000,\n      remaining: 1000,\n    },\n  },\n  query: { type: \"excel\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "d2464840-df07-4e00-a089-387d5fc2a54a",
              "parentUUID": "185e9923-4386-4709-b512-e29f845d870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 with fallback error message if error.errors is missing",
              "fullTitle": "validateExportRequest Middleware should return 400 with fallback error message if error.errors is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {},\n  query: {},\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub(),\n  setHeader: sinon.stub(),\n};\nconst next = sinon.stub();\n// Stub the parse method to throw an error with no `errors` property\nconst originalParse = validationSchemas.exportRequestSchema.parse;\nvalidationSchemas.exportRequestSchema.parse = () => {\n  const err = new Error(\"Some unknown error\");\n  throw err; // no err.errors property\n};\nvalidateExportRequest(req, res, next);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWithMatch({ error: \"Invalid input data\" })).to.be.true;\nexpect(next.called).to.be.false;\n// Restore the original method\nvalidationSchemas.exportRequestSchema.parse = originalParse;",
              "err": {},
              "uuid": "8ff2a6d6-0acd-4a8f-b206-2da4eac0a8cb",
              "parentUUID": "185e9923-4386-4709-b512-e29f845d870e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3813db8-09d0-4ec9-8fe2-2c0e8b92e425",
            "c807bca1-79ce-4c29-b80c-a9fe924f884b",
            "3ef80c49-b6a9-43be-a4b4-9fab7f71734f",
            "36095779-58ab-4148-936b-b7630d1d292a",
            "d2464840-df07-4e00-a089-387d5fc2a54a",
            "8ff2a6d6-0acd-4a8f-b206-2da4eac0a8cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52801dc9-3fa4-4a5b-b683-9c99cbbabf3d",
          "title": "createExcelWorkbook",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\fileGenerators\\generateFiles.test.mjs",
          "file": "\\test\\utils\\fileGenerators\\generateFiles.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a valid Excel workbook buffer for normal input",
              "fullTitle": "createExcelWorkbook should create a valid Excel workbook buffer for normal input",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const summary = { total: 1000, count: 5 };\nconst expenses = [\n  { id: 1, item: 'Coffee', amount: 5 },\n  { id: 2, item: 'Book', amount: 20 },\n];\nconst buffer = createExcelWorkbook(summary, expenses);\nexpect(Buffer.isBuffer(buffer)).to.be.true;\n// Check buffer is valid Excel by reading back sheets\nconst workbook = XLSX.read(buffer);\nexpect(workbook.SheetNames).to.include.members(['Expenses', 'Summary']);",
              "err": {},
              "uuid": "2275b097-c15a-446f-a5e1-60f76ecd3544",
              "parentUUID": "52801dc9-3fa4-4a5b-b683-9c99cbbabf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty expenses and empty summary gracefully",
              "fullTitle": "createExcelWorkbook should handle empty expenses and empty summary gracefully",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const summary = {};\nconst expenses = [];\nconst buffer = createExcelWorkbook(summary, expenses);\nexpect(Buffer.isBuffer(buffer)).to.be.true;\nconst workbook = XLSX.read(buffer);\nexpect(workbook.SheetNames).to.include.members(['Expenses', 'Summary']);\n// Summary sheet data should include keys with 0 values\nconst summarySheet = workbook.Sheets['Summary'];\nconst summaryData = XLSX.utils.sheet_to_json(summarySheet, { header: 1 });\nexpect(summaryData.length).to.equal(0); // no summary entries",
              "err": {},
              "uuid": "e698ea34-c8f8-4a1a-931f-9c8de5a349bb",
              "parentUUID": "52801dc9-3fa4-4a5b-b683-9c99cbbabf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should default null/undefined summary values to 0",
              "fullTitle": "createExcelWorkbook should default null/undefined summary values to 0",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const summary = { total: null, count: undefined };\nconst expenses = [{ id: 1, item: 'Test', amount: 10 }];\nconst buffer = createExcelWorkbook(summary, expenses);\nexpect(Buffer.isBuffer(buffer)).to.be.true;\nconst workbook = XLSX.read(buffer);\nconst summarySheet = workbook.Sheets['Summary'];\nconst summaryData = XLSX.utils.sheet_to_json(summarySheet, { header: 1 });\n// Summary sheet rows have 0 for null/undefined values\nexpect(summaryData).to.deep.include(['total', 0]);\nexpect(summaryData).to.deep.include(['count', 0]);",
              "err": {},
              "uuid": "7334f594-fc7c-468d-90d1-e48e2c79da7f",
              "parentUUID": "52801dc9-3fa4-4a5b-b683-9c99cbbabf3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2275b097-c15a-446f-a5e1-60f76ecd3544",
            "e698ea34-c8f8-4a1a-931f-9c8de5a349bb",
            "7334f594-fc7c-468d-90d1-e48e2c79da7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 42,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "810e1bd6-990d-4224-846a-1debf018f6e0",
          "title": "sendResponse",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\helpers\\responseHelpers.test.mjs",
          "file": "\\test\\utils\\helpers\\responseHelpers.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"sendResponse\"",
              "fullTitle": "sendResponse \"before each\" hook in \"sendResponse\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = {\n  statusCode: null,\n  headers: {},\n  body: null,\n  status(code) {\n    this.statusCode = code;\n    return this;\n  },\n  setHeader(key, value) {\n    this.headers[key] = value;\n  },\n  json(payload) {\n    this.body = payload;\n  },\n  send(payload) {\n    this.body = payload;\n  },\n  redirect(status, url) {\n    this.statusCode = status;\n    this.body = `redirect:${url}`;\n  }\n};",
              "err": {},
              "uuid": "8ba5eb56-af12-4f2d-a3c7-f05c65d61eef",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set custom headers",
              "fullTitle": "sendResponse should set custom headers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 200, data: { message: 'ok' }, headers: { 'X-Test': 'test-value' } });\nexpect(res.headers).to.have.property('X-Test', 'test-value');",
              "err": {},
              "uuid": "19be772c-2394-4345-8ce2-bf688f779a02",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle 1xx informational response with data",
              "fullTitle": "sendResponse should handle 1xx informational response with data",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 100, data: 'info data' });\nexpect(res.statusCode).to.equal(100);\nexpect(res.body).to.deep.equal({ info: 'info data' });",
              "err": {},
              "uuid": "1f5203ff-4e08-4567-b708-c82c04dcddd4",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle 1xx informational response with no data",
              "fullTitle": "sendResponse should handle 1xx informational response with no data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 101 });\nexpect(res.statusCode).to.equal(101);\nexpect(res.body).to.deep.equal({ info: 'Informational response' });",
              "err": {},
              "uuid": "7dd50083-e275-472d-a6e9-655aa52b33fd",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send buffer data for 2xx status",
              "fullTitle": "sendResponse should send buffer data for 2xx status",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const buffer = Buffer.from('test buffer');\nsendResponse(res, { status: 200, data: buffer });\nexpect(res.statusCode).to.equal(200);\nexpect(res.body).to.equal(buffer);",
              "err": {},
              "uuid": "0238434a-348f-45a2-a617-c94155b245b5",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send JSON data for 2xx status with non-buffer data",
              "fullTitle": "sendResponse should send JSON data for 2xx status with non-buffer data",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 200, data: { success: true } });\nexpect(res.statusCode).to.equal(200);\nexpect(res.body).to.deep.equal({ data: { success: true } });",
              "err": {},
              "uuid": "f8c60326-f1b7-459e-9f9f-f0b6b69bf05a",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect for 3xx status with provided location",
              "fullTitle": "sendResponse should redirect for 3xx status with provided location",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 302, data: '/new-location' });\nexpect(res.statusCode).to.equal(302);\nexpect(res.body).to.equal('redirect:/new-location');",
              "err": {},
              "uuid": "b1e2cbb9-303d-4a42-bedf-be0fdf4b588e",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect for 3xx status with default location \"/\"",
              "fullTitle": "sendResponse should redirect for 3xx status with default location \"/\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 301 });\nexpect(res.statusCode).to.equal(301);\nexpect(res.body).to.equal('redirect:/');",
              "err": {},
              "uuid": "e04c395d-fc92-443e-8a43-faa6a8809c3f",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send error JSON for 4xx status with provided error message",
              "fullTitle": "sendResponse should send error JSON for 4xx status with provided error message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 400, error: 'Bad request' });\nexpect(res.statusCode).to.equal(400);\nexpect(res.body).to.deep.equal({ error: 'Bad request' });",
              "err": {},
              "uuid": "d93e9af2-9d34-4c5f-b337-150db7877a6c",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send default error JSON for 4xx status with no error message",
              "fullTitle": "sendResponse should send default error JSON for 4xx status with no error message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 404 });\nexpect(res.statusCode).to.equal(404);\nexpect(res.body).to.deep.equal({ error: 'Client error occurred' });",
              "err": {},
              "uuid": "450d2a8a-62a0-46dc-a98c-bcb2da804f04",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send error JSON for 5xx status with provided error message",
              "fullTitle": "sendResponse should send error JSON for 5xx status with provided error message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 500, error: 'Server error' });\nexpect(res.statusCode).to.equal(500);\nexpect(res.body).to.deep.equal({ error: 'Server error' });",
              "err": {},
              "uuid": "85f891a7-a6d6-4c8a-891e-1666712108d7",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send default error JSON for 5xx status with no error message",
              "fullTitle": "sendResponse should send default error JSON for 5xx status with no error message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 503 });\nexpect(res.statusCode).to.equal(503);\nexpect(res.body).to.deep.equal({ error: 'Internal server error' });",
              "err": {},
              "uuid": "01da2fcf-160c-4a7d-8555-918d3812c632",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send 500 error JSON for unknown status series",
              "fullTitle": "sendResponse should send 500 error JSON for unknown status series",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 700 });\nexpect(res.statusCode).to.equal(500);\nexpect(res.body).to.deep.equal({ error: 'Unknown status code' });",
              "err": {},
              "uuid": "0ee99029-f6bf-4d08-923d-998ef5526ab8",
              "parentUUID": "810e1bd6-990d-4224-846a-1debf018f6e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19be772c-2394-4345-8ce2-bf688f779a02",
            "1f5203ff-4e08-4567-b708-c82c04dcddd4",
            "7dd50083-e275-472d-a6e9-655aa52b33fd",
            "0238434a-348f-45a2-a617-c94155b245b5",
            "f8c60326-f1b7-459e-9f9f-f0b6b69bf05a",
            "b1e2cbb9-303d-4a42-bedf-be0fdf4b588e",
            "e04c395d-fc92-443e-8a43-faa6a8809c3f",
            "d93e9af2-9d34-4c5f-b337-150db7877a6c",
            "450d2a8a-62a0-46dc-a98c-bcb2da804f04",
            "85f891a7-a6d6-4c8a-891e-1666712108d7",
            "01da2fcf-160c-4a7d-8555-918d3812c632",
            "0ee99029-f6bf-4d08-923d-998ef5526ab8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f37e63db-48ca-47f8-8d93-7ed4a87c76ab",
          "title": "setFileHeaders",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\helpers\\setFileHeaders.test.mjs",
          "file": "\\test\\utils\\helpers\\setFileHeaders.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"setFileHeaders\"",
              "fullTitle": "setFileHeaders \"before each\" hook in \"setFileHeaders\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = { setHeader: sinon.spy() }; // spy to monitor calls",
              "err": {},
              "uuid": "d07513b0-a928-4d76-868b-6ee73fb290ff",
              "parentUUID": "f37e63db-48ca-47f8-8d93-7ed4a87c76ab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "sets headers for pdf type",
              "fullTitle": "setFileHeaders sets headers for pdf type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setFileHeaders(res, 'pdf', 'report');\nexpect(res.setHeader.calledWith('Content-Type', 'application/pdf')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=\"report.pdf\"')).to.be.true;",
              "err": {},
              "uuid": "fc3824d8-0a93-40b7-b8eb-abf0b729f6eb",
              "parentUUID": "f37e63db-48ca-47f8-8d93-7ed4a87c76ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sets correct headers for excel type",
              "fullTitle": "setFileHeaders sets correct headers for excel type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setFileHeaders(res, 'excel', 'report');\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=\"report.xlsx\"')).to.be.true;",
              "err": {},
              "uuid": "790e907f-628b-4362-8a9b-7731c08b8dd8",
              "parentUUID": "f37e63db-48ca-47f8-8d93-7ed4a87c76ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "throws error for unsupported file type",
              "fullTitle": "setFileHeaders throws error for unsupported file type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => setFileHeaders(res, 'csv', 'file')).to.throw('Invalid file type for headers');",
              "err": {},
              "uuid": "7b217777-15bf-42b7-992c-fe58ba126075",
              "parentUUID": "f37e63db-48ca-47f8-8d93-7ed4a87c76ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc3824d8-0a93-40b7-b8eb-abf0b729f6eb",
            "790e907f-628b-4362-8a9b-7731c08b8dd8",
            "7b217777-15bf-42b7-992c-fe58ba126075"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "66b3f063-dc55-4a7a-8272-764bc684a940",
          "title": "Validation Schemas",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\validations\\validationSchemas.test.mjs",
          "file": "\\test\\utils\\validations\\validationSchemas.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validates a correct export request body",
              "fullTitle": "Validation Schemas validates a correct export request body",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = {\n  expenses: [{ desc: 'item', amount: 10, category: 'Needs', date: '2023-01-01' }],\n  summary: {\n    salary: 500,\n    needs: 100,\n    wants: 100,\n    savings: 100,\n    total: 300,\n    remaining: 200\n  }\n};\n// Should pass without throwing\nexpect(() => exportRequestSchema.parse(input)).to.not.throw();",
              "err": {},
              "uuid": "4d139ae0-b01e-4eba-9f33-1252d4db8ba7",
              "parentUUID": "66b3f063-dc55-4a7a-8272-764bc684a940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "rejects export request with missing fields",
              "fullTitle": "Validation Schemas rejects export request with missing fields",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidInput = {\n  expenses: [{ amount: 10 }], // Missing desc, category, date\n  summary: { salary: 500 }, // Missing required keys\n};\nexpect(() => exportRequestSchema.parse(invalidInput)).to.throw();",
              "err": {},
              "uuid": "598e45c4-ed5c-4e14-8bc4-db691ab3e511",
              "parentUUID": "66b3f063-dc55-4a7a-8272-764bc684a940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "rejects invalid export query type",
              "fullTitle": "Validation Schemas rejects invalid export query type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// 'csv' is not a valid type in the schema, should throw\nexpect(() => exportQuerySchema.parse({ type: 'csv' })).to.throw();",
              "err": {},
              "uuid": "2ed50fef-a02d-4c17-872b-ac74928d64cd",
              "parentUUID": "66b3f063-dc55-4a7a-8272-764bc684a940",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d139ae0-b01e-4eba-9f33-1252d4db8ba7",
            "598e45c4-ed5c-4e14-8bc4-db691ab3e511",
            "2ed50fef-a02d-4c17-872b-ac74928d64cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}