{
  "stats": {
    "suites": 5,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-30T06:58:33.896Z",
    "end": "2025-05-30T06:58:33.971Z",
    "duration": 75,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "605fac12-1347-4667-af94-e671bdfab202",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9d35df85-d6a3-4b8a-b849-c3834dedef65",
          "title": "validateExportRequest Middleware",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\middleware\\validateExportData.test.mjs",
          "file": "\\test\\middleware\\validateExportData.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should call next() for valid input",
              "fullTitle": "validateExportRequest Middleware should call next() for valid input",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [{ desc: \"Lunch\", amount: 10, category: \"Needs\", date: \"2023-01-01\" }],\n    summary: {\n      salary: 5000,\n      needs: 2000,\n      wants: 1000,\n      savings: 2000,\n      total: 5000,\n      remaining: 1000,\n    },\n  },\n  query: { type: \"pdf\" },\n};\nconst res = {\n  status: () => res,\n  json: () => { },\n  setHeader: () => { },\n};\nconst next = () => done();\nvalidateExportRequest(req, res, next);",
              "err": {},
              "uuid": "5ca4a46f-6fa4-44bd-b7a6-6f90ff8ec5a2",
              "parentUUID": "9d35df85-d6a3-4b8a-b849-c3834dedef65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid body (missing expenses)",
              "fullTitle": "validateExportRequest Middleware should return 400 for invalid body (missing expenses)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: { summary: {} }, // Missing expenses\n  query: { type: \"pdf\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "ea10d2b7-434b-4cd5-a26a-d2b4c506e6cd",
              "parentUUID": "9d35df85-d6a3-4b8a-b849-c3834dedef65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid query (unsupported type)",
              "fullTitle": "validateExportRequest Middleware should return 400 for invalid query (unsupported type)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [{ desc: \"Lunch\", amount: 10, category: \"Needs\", date: \"2023-01-01\" }],\n    summary: {\n      salary: 5000,\n      needs: 2000,\n      wants: 1000,\n      savings: 2000,\n      total: 5000,\n      remaining: 1000,\n    },\n  },\n  query: { type: \"csv\" }, // Invalid type\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "00dcb05f-c9a8-4359-b52e-dbbb56dbb802",
              "parentUUID": "9d35df85-d6a3-4b8a-b849-c3834dedef65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for missing summary",
              "fullTitle": "validateExportRequest Middleware should return 400 for missing summary",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [{ desc: \"Lunch\", amount: 10, category: \"Needs\", date: \"2023-01-01\" }],\n  },\n  query: { type: \"pdf\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "7495e5b8-f340-4235-a3bf-c3e18cf5d6a0",
              "parentUUID": "9d35df85-d6a3-4b8a-b849-c3834dedef65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for empty expenses array",
              "fullTitle": "validateExportRequest Middleware should return 400 for empty expenses array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    expenses: [], // Invalid: empty array\n    summary: {\n      salary: 5000,\n      needs: 2000,\n      wants: 1000,\n      savings: 2000,\n      total: 5000,\n      remaining: 1000,\n    },\n  },\n  query: { type: \"excel\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().callsFake((payload) => {\n    expect(res.status.calledWith(400)).to.be.true;\n    expect(payload).to.have.property(\"error\");\n    done();\n  }),\n};\nvalidateExportRequest(req, res, () => { });",
              "err": {},
              "uuid": "72a33d2d-be12-4fbf-ab89-3a9c962fcab0",
              "parentUUID": "9d35df85-d6a3-4b8a-b849-c3834dedef65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 with fallback error message if error.errors is missing",
              "fullTitle": "validateExportRequest Middleware should return 400 with fallback error message if error.errors is missing",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {},\n  query: {},\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub(),\n  setHeader: sinon.stub(),\n};\nconst next = sinon.stub();\n// Stub the parse method to throw an error with no `errors` property\nconst originalParse = validationSchemas.exportRequestSchema.parse;\nvalidationSchemas.exportRequestSchema.parse = () => {\n  const err = new Error(\"Some unknown error\");\n  throw err; // no err.errors property\n};\nvalidateExportRequest(req, res, next);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWithMatch({ error: \"Invalid input data\" })).to.be.true;\nexpect(next.called).to.be.false;\n// Restore the original method\nvalidationSchemas.exportRequestSchema.parse = originalParse;",
              "err": {},
              "uuid": "1194c241-37c7-4665-b09b-3efbd8bd0cea",
              "parentUUID": "9d35df85-d6a3-4b8a-b849-c3834dedef65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ca4a46f-6fa4-44bd-b7a6-6f90ff8ec5a2",
            "ea10d2b7-434b-4cd5-a26a-d2b4c506e6cd",
            "00dcb05f-c9a8-4359-b52e-dbbb56dbb802",
            "7495e5b8-f340-4235-a3bf-c3e18cf5d6a0",
            "72a33d2d-be12-4fbf-ab89-3a9c962fcab0",
            "1194c241-37c7-4665-b09b-3efbd8bd0cea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fa1ea2ee-6de7-45f1-8fc0-d9a9736900b4",
          "title": "createExcelWorkbook",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\fileGenerators\\generateFiles.test.mjs",
          "file": "\\test\\utils\\fileGenerators\\generateFiles.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a valid Excel workbook buffer for normal input",
              "fullTitle": "createExcelWorkbook should create a valid Excel workbook buffer for normal input",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const summary = { total: 1000, count: 5 };\nconst expenses = [\n  { id: 1, item: 'Coffee', amount: 5 },\n  { id: 2, item: 'Book', amount: 20 },\n];\nconst buffer = createExcelWorkbook(summary, expenses);\nexpect(Buffer.isBuffer(buffer)).to.be.true;\n// Check buffer is valid Excel by reading back sheets\nconst workbook = XLSX.read(buffer);\nexpect(workbook.SheetNames).to.include.members(['Expenses', 'Summary']);",
              "err": {},
              "uuid": "e8aed974-c046-4f96-b572-275f52c51986",
              "parentUUID": "fa1ea2ee-6de7-45f1-8fc0-d9a9736900b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty expenses and empty summary gracefully",
              "fullTitle": "createExcelWorkbook should handle empty expenses and empty summary gracefully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const summary = {};\nconst expenses = [];\nconst buffer = createExcelWorkbook(summary, expenses);\nexpect(Buffer.isBuffer(buffer)).to.be.true;\nconst workbook = XLSX.read(buffer);\nexpect(workbook.SheetNames).to.include.members(['Expenses', 'Summary']);\n// Summary sheet data should include keys with 0 values\nconst summarySheet = workbook.Sheets['Summary'];\nconst summaryData = XLSX.utils.sheet_to_json(summarySheet, { header: 1 });\nexpect(summaryData.length).to.equal(0); // no summary entries",
              "err": {},
              "uuid": "5b6e0667-1ac7-4573-9377-da66ab47e9fd",
              "parentUUID": "fa1ea2ee-6de7-45f1-8fc0-d9a9736900b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should default null/undefined summary values to 0",
              "fullTitle": "createExcelWorkbook should default null/undefined summary values to 0",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const summary = { total: null, count: undefined };\nconst expenses = [{ id: 1, item: 'Test', amount: 10 }];\nconst buffer = createExcelWorkbook(summary, expenses);\nexpect(Buffer.isBuffer(buffer)).to.be.true;\nconst workbook = XLSX.read(buffer);\nconst summarySheet = workbook.Sheets['Summary'];\nconst summaryData = XLSX.utils.sheet_to_json(summarySheet, { header: 1 });\n// Summary sheet rows have 0 for null/undefined values\nexpect(summaryData).to.deep.include(['total', 0]);\nexpect(summaryData).to.deep.include(['count', 0]);",
              "err": {},
              "uuid": "de94e88b-dcdd-4935-8fa5-5a2adab78432",
              "parentUUID": "fa1ea2ee-6de7-45f1-8fc0-d9a9736900b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e8aed974-c046-4f96-b572-275f52c51986",
            "5b6e0667-1ac7-4573-9377-da66ab47e9fd",
            "de94e88b-dcdd-4935-8fa5-5a2adab78432"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
          "title": "sendResponse",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\helpers\\responseHelpers.test.mjs",
          "file": "\\test\\utils\\helpers\\responseHelpers.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"sendResponse\"",
              "fullTitle": "sendResponse \"before each\" hook in \"sendResponse\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = {\n  statusCode: null,\n  headers: {},\n  body: null,\n  status(code) {\n    this.statusCode = code;\n    return this;\n  },\n  setHeader(key, value) {\n    this.headers[key] = value;\n  },\n  json(payload) {\n    this.body = payload;\n  },\n  send(payload) {\n    this.body = payload;\n  },\n  redirect(status, url) {\n    this.statusCode = status;\n    this.body = `redirect:${url}`;\n  }\n};",
              "err": {},
              "uuid": "053c957e-bfe7-4a3d-ac97-8233621e678a",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set custom headers",
              "fullTitle": "sendResponse should set custom headers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 200, data: { message: 'ok' }, headers: { 'X-Test': 'test-value' } });\nexpect(res.headers).to.have.property('X-Test', 'test-value');",
              "err": {},
              "uuid": "b93486a0-af7e-4047-8931-15dfb8ec94df",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle 1xx informational response with data",
              "fullTitle": "sendResponse should handle 1xx informational response with data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 100, data: 'info data' });\nexpect(res.statusCode).to.equal(100);\nexpect(res.body).to.deep.equal({ info: 'info data' });",
              "err": {},
              "uuid": "0289c28a-21cd-4ff3-bc1d-efa869227cfb",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle 1xx informational response with no data",
              "fullTitle": "sendResponse should handle 1xx informational response with no data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 101 });\nexpect(res.statusCode).to.equal(101);\nexpect(res.body).to.deep.equal({ info: 'Informational response' });",
              "err": {},
              "uuid": "d9dcea89-c5c7-489a-95c4-1ef1c6b25955",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send buffer data for 2xx status",
              "fullTitle": "sendResponse should send buffer data for 2xx status",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const buffer = Buffer.from('test buffer');\nsendResponse(res, { status: 200, data: buffer });\nexpect(res.statusCode).to.equal(200);\nexpect(res.body).to.equal(buffer);",
              "err": {},
              "uuid": "092a506c-cd96-417b-9f7a-4febfea89bec",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send JSON data for 2xx status with non-buffer data",
              "fullTitle": "sendResponse should send JSON data for 2xx status with non-buffer data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 200, data: { success: true } });\nexpect(res.statusCode).to.equal(200);\nexpect(res.body).to.deep.equal({ data: { success: true } });",
              "err": {},
              "uuid": "7835f5ac-fbfd-463f-8d61-1bd6dd07cd12",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect for 3xx status with provided location",
              "fullTitle": "sendResponse should redirect for 3xx status with provided location",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 302, data: '/new-location' });\nexpect(res.statusCode).to.equal(302);\nexpect(res.body).to.equal('redirect:/new-location');",
              "err": {},
              "uuid": "b2ffe526-57f5-4d99-928c-26984c0408c2",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should redirect for 3xx status with default location \"/\"",
              "fullTitle": "sendResponse should redirect for 3xx status with default location \"/\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 301 });\nexpect(res.statusCode).to.equal(301);\nexpect(res.body).to.equal('redirect:/');",
              "err": {},
              "uuid": "cd61b47a-18aa-415d-b5ec-5c223805a935",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send error JSON for 4xx status with provided error message",
              "fullTitle": "sendResponse should send error JSON for 4xx status with provided error message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 400, error: 'Bad request' });\nexpect(res.statusCode).to.equal(400);\nexpect(res.body).to.deep.equal({ error: 'Bad request' });",
              "err": {},
              "uuid": "aaac9156-e1c1-470a-a1c6-8c575f158d60",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send default error JSON for 4xx status with no error message",
              "fullTitle": "sendResponse should send default error JSON for 4xx status with no error message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 404 });\nexpect(res.statusCode).to.equal(404);\nexpect(res.body).to.deep.equal({ error: 'Client error occurred' });",
              "err": {},
              "uuid": "78cdacf8-b9c9-420d-a6f0-cda3e3be7cca",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send error JSON for 5xx status with provided error message",
              "fullTitle": "sendResponse should send error JSON for 5xx status with provided error message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 500, error: 'Server error' });\nexpect(res.statusCode).to.equal(500);\nexpect(res.body).to.deep.equal({ error: 'Server error' });",
              "err": {},
              "uuid": "038c002f-d0b4-4876-9afa-cdc3f0c3eec5",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send default error JSON for 5xx status with no error message",
              "fullTitle": "sendResponse should send default error JSON for 5xx status with no error message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 503 });\nexpect(res.statusCode).to.equal(503);\nexpect(res.body).to.deep.equal({ error: 'Internal server error' });",
              "err": {},
              "uuid": "d29c1697-d0a0-4977-9a2e-39e20c311ff9",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send 500 error JSON for unknown status series",
              "fullTitle": "sendResponse should send 500 error JSON for unknown status series",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendResponse(res, { status: 700 });\nexpect(res.statusCode).to.equal(500);\nexpect(res.body).to.deep.equal({ error: 'Unknown status code' });",
              "err": {},
              "uuid": "dd7ef169-0d19-4824-ba01-5f878ae714c8",
              "parentUUID": "ad2cd96f-eef4-4282-a07f-0810d76e7c11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b93486a0-af7e-4047-8931-15dfb8ec94df",
            "0289c28a-21cd-4ff3-bc1d-efa869227cfb",
            "d9dcea89-c5c7-489a-95c4-1ef1c6b25955",
            "092a506c-cd96-417b-9f7a-4febfea89bec",
            "7835f5ac-fbfd-463f-8d61-1bd6dd07cd12",
            "b2ffe526-57f5-4d99-928c-26984c0408c2",
            "cd61b47a-18aa-415d-b5ec-5c223805a935",
            "aaac9156-e1c1-470a-a1c6-8c575f158d60",
            "78cdacf8-b9c9-420d-a6f0-cda3e3be7cca",
            "038c002f-d0b4-4876-9afa-cdc3f0c3eec5",
            "d29c1697-d0a0-4977-9a2e-39e20c311ff9",
            "dd7ef169-0d19-4824-ba01-5f878ae714c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "46a00aa8-0139-43c1-abec-8cfec6e90463",
          "title": "setFileHeaders",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\helpers\\setFileHeaders.test.mjs",
          "file": "\\test\\utils\\helpers\\setFileHeaders.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"setFileHeaders\"",
              "fullTitle": "setFileHeaders \"before each\" hook in \"setFileHeaders\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = { setHeader: sinon.spy() }; // spy to monitor calls",
              "err": {},
              "uuid": "ab15e5b2-744f-4ae6-9d1b-b411f0901a77",
              "parentUUID": "46a00aa8-0139-43c1-abec-8cfec6e90463",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "sets headers for pdf type",
              "fullTitle": "setFileHeaders sets headers for pdf type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setFileHeaders(res, 'pdf', 'report');\nexpect(res.setHeader.calledWith('Content-Type', 'application/pdf')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=\"report.pdf\"')).to.be.true;",
              "err": {},
              "uuid": "7eb255ae-5727-4280-b0bc-6a82cfc7a08f",
              "parentUUID": "46a00aa8-0139-43c1-abec-8cfec6e90463",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sets correct headers for excel type",
              "fullTitle": "setFileHeaders sets correct headers for excel type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setFileHeaders(res, 'excel', 'report');\nexpect(res.setHeader.calledWith('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')).to.be.true;\nexpect(res.setHeader.calledWith('Content-Disposition', 'attachment; filename=\"report.xlsx\"')).to.be.true;",
              "err": {},
              "uuid": "2db9d757-6c3f-4aa1-a1dd-05e5e0bbe1a7",
              "parentUUID": "46a00aa8-0139-43c1-abec-8cfec6e90463",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "throws error for unsupported file type",
              "fullTitle": "setFileHeaders throws error for unsupported file type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => setFileHeaders(res, 'csv', 'file')).to.throw('Invalid file type for headers');",
              "err": {},
              "uuid": "7e50ebb5-73cb-4bac-a8c7-ee96c3b869c8",
              "parentUUID": "46a00aa8-0139-43c1-abec-8cfec6e90463",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7eb255ae-5727-4280-b0bc-6a82cfc7a08f",
            "2db9d757-6c3f-4aa1-a1dd-05e5e0bbe1a7",
            "7e50ebb5-73cb-4bac-a8c7-ee96c3b869c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3183d77-3de2-4b1a-97cf-922c4e0d9245",
          "title": "Validation Schemas",
          "fullFile": "C:\\Users\\Atharva.Jaiswal\\Desktop\\Tasks\\Task5\\expense-tracker\\backend\\test\\utils\\validations\\validationSchemas.test.mjs",
          "file": "\\test\\utils\\validations\\validationSchemas.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validates a correct export request body",
              "fullTitle": "Validation Schemas validates a correct export request body",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = {\n  expenses: [{ desc: 'item', amount: 10, category: 'Needs', date: '2023-01-01' }],\n  summary: {\n    salary: 500,\n    needs: 100,\n    wants: 100,\n    savings: 100,\n    total: 300,\n    remaining: 200\n  }\n};\n// Should pass without throwing\nexpect(() => exportRequestSchema.parse(input)).to.not.throw();",
              "err": {},
              "uuid": "35ceca39-d8a1-4d35-ace3-3b7f15fa5a05",
              "parentUUID": "e3183d77-3de2-4b1a-97cf-922c4e0d9245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "rejects export request with missing fields",
              "fullTitle": "Validation Schemas rejects export request with missing fields",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidInput = {\n  expenses: [{ amount: 10 }], // Missing desc, category, date\n  summary: { salary: 500 }, // Missing required keys\n};\nexpect(() => exportRequestSchema.parse(invalidInput)).to.throw();",
              "err": {},
              "uuid": "b1913509-e64d-40a5-ad10-2e142eb226a0",
              "parentUUID": "e3183d77-3de2-4b1a-97cf-922c4e0d9245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "rejects invalid export query type",
              "fullTitle": "Validation Schemas rejects invalid export query type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// 'csv' is not a valid type in the schema, should throw\nexpect(() => exportQuerySchema.parse({ type: 'csv' })).to.throw();",
              "err": {},
              "uuid": "dc9e557a-87db-495f-a6ff-c3d0a5d73f92",
              "parentUUID": "e3183d77-3de2-4b1a-97cf-922c4e0d9245",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35ceca39-d8a1-4d35-ace3-3b7f15fa5a05",
            "b1913509-e64d-40a5-ad10-2e142eb226a0",
            "dc9e557a-87db-495f-a6ff-c3d0a5d73f92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}